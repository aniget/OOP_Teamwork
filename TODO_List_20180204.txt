Minutes of meeting 4.02.2018

TASKS

Алекс - Validate - всички негови методи както и самия клас Validate стават нестатични и го разделяме на два класа:
	-ValidateModel
	-ValidateCore
Алекс - Интерфейс за двата Validate класа

Angel - Извеждане на регистрациите от StartUp в отделен модул AutofacModuleConfig : Autofac.Module

??? - Writer от тип IWrited и метод приемащ string и с имплементация за Console - ще се ползва навсякъде където имаме оoverride на ToString
??? - Reader - подобно на горното

Warehouse class
DONE: Ангел - SRP: изваждане на методите за вкарване и изкарване на стоки в отделен клас с име WarehouseStockRegister и WarehouseRemover като отделни класове + интерфейси за двата
DONE: Ангел - интерфейс за Warehouse класа

Invoce class
??? - осигуряване на SRP

Client class
??? - Add/Remove Vehicle да се изнесат в отделни класове

BankAccount
??? - Deposit/WithdrawFund - да се отделят в методи


COMMANDS to refactor through container

Angel              
               case "fireEmployee":
               case "changeEmployeeRate":  
              v case "showAllEmployeesAtDepartment":
               case "changeEmployeePosition":                
               case "addEmployeeResponsibility":                    
               case "removeEmpoloyeeResponsibility":
                case "sellStockToClientVehicle":
               case "sellServiceToClientVehicle":
Alex
                
                case "addClientPayment":
                case "withdrawCashFromBank":        
                case "issueInvoices":
               case "addVehicleToClient":
               case "createBankAccount":
               case "depositCashInBank":
                case "registerSupplier":
               case "removeSupplier":
Slav              
                
                case "registerClient":
                case "changeClientName":                    
               case "changeSupplierName":
               case "orderStockToWarehouse":
                case "removeClient":
                case "listWarehouseItems":
               case "listClients":
               case "help":

OPTIONAL TASKS
1. Проверките за правата, които служител им за да извърши дадена задача да се централизират посредством Roles таблица и един метод, който приема ролята на служителя и задачата, която иска да изпълни


Q to Angel: какво означава това: 
	protected InvalidIdException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
        }

ion Module



QUESTIONS

Q: Decorator Pattern - декориране на служителя с правата, които му се дават
Марто: Decorator pattern за Employee responsibilities - определено не му звучи. Съвета беше за рпоекта да не се занимаваме с Design Patterns, 
но показа един мн интересен сайт на тази тема, който поне аз виждам за първи път: https://sourcemaking.com/design_patterns/strategy

Q: методи в клас Employee - защо и дали да ги отделяме от класа
	- Deposit/WithdrawFund - да се отделят в методи
Марто: Методи, които не се извършват от самия обект (примера с Employee, който не си сменя сам заплатата) е добре да се отделят. Мястото на тези методи е наппример в EmployeeService клас, 
който да приема IDatabase и да има всички методи, които update-ват Employee. Аналогично за Warehouse - тя сама не си ги добавя или маха частите, това се прави от StockManager например. 

Q: ChangeParamenter - good or bad practice?
 ЗА аргументи - ако съответния клас се казва Modifier и приема съответния обект, който ще променяме (IEmployee IClient, ISupplier, etc.) => CODE REUSE
 ПРОТИВ арг - различни валидации за всеки един параметър - string, int; абсолютно нечетимо ще стане какво точно променя дадения ChangeParameter
Марто: Не е фен на "глобален" метод ChangeParameter защото той ще трябва да приема object-и и след това да кастваме до побъркване

Q: добра практика ли е всички методи да са VIRTUAL (с изключение на тези коита са задължителни за прилагане) с цел да можем да ги модифицираме в бъдеще и да спазим OCP
Марто: това, че един метод ще е виртуален не ни прави по развързан/ отворен кода. Ако получим изискване, които налага даден метод да е виртуален, тогава го правим, 
но това че всички методи ще са ни виртуални като начало не е плюс

Q: Composition over Inheritance - как да го приложим и трябва ли да запазим трите нива на наследяване, които бяха заложени като изискване
Марто:  и в момента ние ползваме composition, т.е. ок сме с този принцип, но ако виждаме че може да махнем нещо от нсаледяванията, go for it. 